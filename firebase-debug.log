[debug] [2022-11-20T04:55:24.405Z] ----------------------------------------------------------------------
[debug] [2022-11-20T04:55:24.407Z] Command:       C:\Program Files\nodejs\node.exe C:\Users\65860\AppData\Roaming\npm\node_modules\firebase-tools\lib\bin\firebase.js ext:install moralis/moralis-auth
[debug] [2022-11-20T04:55:24.407Z] CLI Version:   11.16.1
[debug] [2022-11-20T04:55:24.407Z] Platform:      win32
[debug] [2022-11-20T04:55:24.407Z] Node Version:  v18.12.1
[debug] [2022-11-20T04:55:24.408Z] Time:          Sun Nov 20 2022 12:55:24 GMT+0800 (Singapore Standard Time)
[debug] [2022-11-20T04:55:24.408Z] ----------------------------------------------------------------------
[debug] 
[debug] [2022-11-20T04:55:24.448Z] Object ".extensions" in "firebase.json" has unknown property: {"additionalProperty":"moralis-auth"}
[debug] [2022-11-20T04:55:24.451Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] [2022-11-20T04:55:24.451Z] > authorizing via signed-in user (bcardtoday@gmail.com)
[debug] [2022-11-20T04:55:24.451Z] [iam] checking project bsite-681e1 for permissions ["firebase.projects.get","firebaseextensions.instances.create"]
[debug] [2022-11-20T04:55:24.452Z] >>> [apiv2][query] POST https://cloudresourcemanager.googleapis.com/v1/projects/bsite-681e1:testIamPermissions [none]
[debug] [2022-11-20T04:55:24.453Z] >>> [apiv2][(partial)header] POST https://cloudresourcemanager.googleapis.com/v1/projects/bsite-681e1:testIamPermissions x-goog-quota-user=projects/bsite-681e1
[debug] [2022-11-20T04:55:24.453Z] >>> [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/bsite-681e1:testIamPermissions {"permissions":["firebase.projects.get","firebaseextensions.instances.create"]}
[debug] [2022-11-20T04:55:25.544Z] <<< [apiv2][status] POST https://cloudresourcemanager.googleapis.com/v1/projects/bsite-681e1:testIamPermissions 200
[debug] [2022-11-20T04:55:25.544Z] <<< [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/bsite-681e1:testIamPermissions {"permissions":["firebase.projects.get","firebaseextensions.instances.create"]}
[info] i  extensions: ensuring required API firebaseextensions.googleapis.com is enabled... 
[debug] [2022-11-20T04:55:25.545Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/bsite-681e1/services/firebaseextensions.googleapis.com [none]
[debug] [2022-11-20T04:55:25.545Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/bsite-681e1/services/firebaseextensions.googleapis.com x-goog-quota-user=projects/bsite-681e1
[debug] [2022-11-20T04:55:28.594Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/bsite-681e1/services/firebaseextensions.googleapis.com 200
[debug] [2022-11-20T04:55:28.594Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/bsite-681e1/services/firebaseextensions.googleapis.com [omitted]
[info] +  extensions: required API firebaseextensions.googleapis.com is enabled 
[debug] [2022-11-20T04:55:28.596Z] >>> [apiv2][query] GET https://firebase.googleapis.com/v1beta1/projects/bsite-681e1 [none]
[debug] [2022-11-20T04:55:29.093Z] <<< [apiv2][status] GET https://firebase.googleapis.com/v1beta1/projects/bsite-681e1 200
[debug] [2022-11-20T04:55:29.093Z] <<< [apiv2][body] GET https://firebase.googleapis.com/v1beta1/projects/bsite-681e1 {"projectId":"bsite-681e1","projectNumber":"573072731729","displayName":"bsite","name":"projects/bsite-681e1","resources":{"hostingSite":"bsite-681e1"},"state":"ACTIVE","etag":"1_c7b10c89-522f-423b-b5cb-f22144b268ac"}
[info] i  extensions: Checking project IAM policy... 
[debug] [2022-11-20T04:55:29.093Z] >>> [apiv2][query] GET https://firebaseextensions.googleapis.com/v1beta/projects/bsite-681e1/instances pageSize=100&pageToken=
[debug] [2022-11-20T04:55:31.981Z] <<< [apiv2][status] GET https://firebaseextensions.googleapis.com/v1beta/projects/bsite-681e1/instances 200
[debug] [2022-11-20T04:55:31.981Z] <<< [apiv2][body] GET https://firebaseextensions.googleapis.com/v1beta/projects/bsite-681e1/instances {"instances":[{"name":"projects/bsite-681e1/instances/moralis-auth","createTime":"2022-11-19T14:04:55.328060Z","updateTime":"2022-11-19T14:11:41.310458Z","state":"ACTIVE","config":{"name":"projects/bsite-681e1/instances/moralis-auth/configurations/9751ded7-4f2f-43ed-89e6-62fd8a674380","createTime":"2022-11-19T14:04:55.328060Z","source":{"name":"projects/moralis-extensions/sources/a6a5c457-e4ce-41d2-8892-3e8e44b5cbf0","packageUri":"https://storage.googleapis.com/firebase-ext-eap-uploads/firebase-archive--27255-iEbGueF49eUt-.zip?alt=media","hash":"5cfdc4bbc3f482d7ced79022e6cd026249b991513bac9e43b5fee2d81be0026e","extensionRoot":"/","spec":{"specVersion":"v1beta","name":"moralis-auth","version":"0.1.4","description":"Signs in the using Moralis Auth as the identity provider.","apis":[{"apiName":"iam.googleapis.com","reason":"To sign custom authentication token"},{"apiName":"iamcredentials.googleapis.com","reason":"To sign custom authentication token"},{"apiName":"stackdriver.googleapis.com","reason":"Monitoring"},{"apiName":"monitoring.googleapis.com","reason":"Monitoring"},{"apiName":"logging.googleapis.com","reason":"Monitoring"},{"apiName":"secretmanager.googleapis.com","reason":"Securely storing and reading OAuth 2.0 client secret"}],"resources":[{"name":"requestMessage","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"This function creates a message to sign by a user.","deletionPolicy":"DELETE"},{"name":"issueToken","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"This function validates a signed message by a user. If the message is correctly signed, then the function issues a custom token.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Moralis","url":"https://moralis.io"},"contributors":[{"authorName":"Bart Tadych","url":"https://github.com/b4rtaz"}],"license":"Apache-2.0","sourceUrl":"https://github.com/MoralisWeb3/firebase-extensions/tree/main/auth","params":[{"param":"LOCATION","label":"Cloud Functions location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-central2","label":"Warsaw (europe-central2)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east1","label":"Taiwan (asia-east1)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast1","label":"Singapore (asia-southeast1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"immutable":true},{"param":"MORALIS_API_KEY","label":"Moralis API Key","type":"SECRET","description":"The API key that is retrievable from the Moralis Admin Panel.","required":true,"example":"6NkIpUJkuKlphOhBNVrpQq7fMB13v5Du5C6D90pZQRJS3bJssHblQc6Hh2rPLv3O","validationRegex":"^[a-zA-Z0-9]{64}$","validationErrorMessage":"The app ID must be retrieved from the Moralis Admin Panel."},{"param":"WEBSITE_URI","label":"Website URI","type":"STRING","description":"The final website URI. It should contain a folder if present. For testing purposes, you may enter: http://localhost, but we recommend to enter a URI where you will release your app. This URI will be used in the authentication flow.","required":true,"example":"https://website.com/my-app"},{"param":"SERVICE_ACCOUNT_PROJECT_ID","label":"Project Id of Service Account","type":"STRING","description":"The project id of the service account. To extract this value from the service account certificate you can use our converter: https://moralisweb3.github.io/firebase-extensions/service-account-converter/","required":true,"example":"example-id"},{"param":"SERVICE_ACCOUNT_EMAIL","label":"E-mail of Service Account","type":"STRING","description":"The e-mail of the service account. To extract this value from the service account certificate you can use our converter: https://moralisweb3.github.io/firebase-extensions/service-account-converter/","required":true,"example":"firebase-adminsdk-lxrdi@example-id.iam.gserviceaccount.com","validationRegex":"^([a-zA-Z0-9]+(?:[.-]?[a-zA-Z0-9]+)*@[a-zA-Z0-9]+(?:[.-]?[a-zA-Z0-9]+)*\\.[a-zA-Z]{2,7})$","validationErrorMessage":"The e-mail provided has invalid format."},{"param":"SERVICE_ACCOUNT_PRIVATE_KEY","label":"Private Key of Service Account","type":"SECRET","description":"The private key of the service account. To extract this value from the service account certificate you can use our converter: https://moralisweb3.github.io/firebase-extensions/service-account-converter/","required":true,"example":"https://website.com/my-app","validationRegex":"^\\S+$","validationErrorMessage":"The private key provided has invalid format."}],"preinstallContent":"Use this extension to allow your community of users to authenticate with Web3 wallets.\n\n## Before Start\n\nThis extension requires a certificate of [the service account](https://firebase.google.com/support/guides/service-accounts). To generate it go to **Firebase Console** > **Your Project** > **Project Settings** > **Service Accounts** and click the **Generate new private key** button.\n\nYour service account must have the **Service Account Token Creator** role. This extension needs it to issue [custom tokens](https://firebase.google.com/docs/auth/admin/create-custom-tokens).\n\nDuring the installation process the installer will ask you about the certificate. Before you answer, you need to convert the certificate to extension variables. We created an online converter that automates this process.\n\n*  [🛠 Open Service Account Converter](https://moralisweb3.github.io/firebase-extensions/service-account-converter/)\n\n## Billing\n\nThis extension uses the following services:\n\n* Firebase Cloud Functions and Firebase Authentication, this extension requires the pay as you go plan ([pricing](https://firebase.google.com/pricing))\n* [Secret Manager](https://cloud.google.com/secret-manager/) service ([pricing](https://cloud.google.com/secret-manager/pricing)) from the Google Cloud to protect a sensitive configuration of the extension\n* Moralis Auth API ([pricing](https://moralis.io/pricing/)) to handle an authentication flow.\n\nYou are responsible for any costs associated with your use of these services.\n","postinstallContent":"### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n","readmeContent":"# Authenticate with Moralis Web3\n\nSigns in using Moralis Auth as the identity provider. \n\n### How to Install?\n\nUsing the Firebase CLI:\n\n**Step 1**: Before you start, you need to generate a certificate for the Service Account. This extension requires the service account for issuing authorization tokens. To generate the certificate go to: `Firebase Console` > `Your Project` > `Project Settings` > `Service Accounts` and click the `Generate new private key` button.\n\n**Step 2**: Add the extension to your project: `firebase ext:install moralis/moralis-auth --local --project=<PROJECT_ID_OR_ALIAS>`\n\n**Step 3**: During the installation process, you will be asked for some information. Some of them would be questions about the service account. The extension needs some data from your certificate. We've created the converter that extracts this information: [open the converter](https://moralisweb3.github.io/firebase-extensions/service-account-converter/), put your certificate in the text field and copy a variable value as an answer for a specific question in your console.\n\n**Step 4 (Optional)**: Test this extension locally: `firebase emulators:start`\n\n**Step 5**: Deploy this extension: `firebase deploy --only extensions --project=<PROJECT_ID_OR_ALIAS>`\n","displayName":"Authenticate with Moralis Auth"},"fetchTime":"2022-11-02T16:06:44.125053Z","lastOperationName":"projects/moralis-extensions/operations/c167555d-dd50-4933-8a1f-c3c7c830d4ad","state":"ACTIVE"},"params":{"LOCATION":"us-central1","MORALIS_API_KEY":"projects/573072731729/secrets/ext-moralis-auth-MORALIS_API_KEY/versions/1","WEBSITE_URI":"http://localhost","SERVICE_ACCOUNT_PROJECT_ID":"bsite-681e1","SERVICE_ACCOUNT_EMAIL":"firebase-adminsdk-uh0p4@bsite-681e1.iam.gserviceaccount.com","SERVICE_ACCOUNT_PRIVATE_KEY":"projects/573072731729/secrets/ext-moralis-auth-SERVICE_ACCOUNT_PRIVATE_KEY/versions/1"},"populatedPostinstallContent":"### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n","extensionRef":"moralis/moralis-auth","extensionVersion":"0.1.4"},"lastOperationName":"projects/bsite-681e1/operations/8962c562-84a4-44f4-9658-f0a2ebd6b891","serviceAccountEmail":"ext-moralis-auth@bsite-681e1.iam.gserviceaccount.com","lastOperationType":"CREATE","etag":"aac8037ffd1b4989c5062a8e0d52d7ddcd3064718b4d9bbe3041474941aab563"}]}
[debug] [2022-11-20T04:55:31.982Z] >>> [apiv2][query] POST https://cloudresourcemanager.googleapis.com/v1/projects/bsite-681e1:getIamPolicy [none]
[debug] [2022-11-20T04:55:33.104Z] <<< [apiv2][status] POST https://cloudresourcemanager.googleapis.com/v1/projects/bsite-681e1:getIamPolicy 200
[debug] [2022-11-20T04:55:33.105Z] <<< [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/bsite-681e1:getIamPolicy {"version":1,"etag":"BwXt01ijNto=","bindings":[{"role":"roles/artifactregistry.serviceAgent","members":["serviceAccount:service-573072731729@gcp-sa-artifactregistry.iam.gserviceaccount.com"]},{"role":"roles/cloudbuild.builds.builder","members":["serviceAccount:573072731729@cloudbuild.gserviceaccount.com"]},{"role":"roles/cloudbuild.serviceAgent","members":["serviceAccount:service-573072731729@gcp-sa-cloudbuild.iam.gserviceaccount.com"]},{"role":"roles/cloudfunctions.serviceAgent","members":["serviceAccount:service-573072731729@gcf-admin-robot.iam.gserviceaccount.com"]},{"role":"roles/containerregistry.ServiceAgent","members":["serviceAccount:service-573072731729@containerregistry.iam.gserviceaccount.com"]},{"role":"roles/editor","members":["serviceAccount:573072731729@cloudservices.gserviceaccount.com","serviceAccount:bsite-681e1@appspot.gserviceaccount.com"]},{"role":"roles/firebase.managementServiceAgent","members":["serviceAccount:firebase-service-account@firebase-sa-management.iam.gserviceaccount.com","serviceAccount:service-573072731729@gcp-sa-firebase.iam.gserviceaccount.com"]},{"role":"roles/firebase.sdkAdminServiceAgent","members":["serviceAccount:firebase-adminsdk-uh0p4@bsite-681e1.iam.gserviceaccount.com"]},{"role":"roles/firebaseauth.admin","members":["serviceAccount:firebase-adminsdk-uh0p4@bsite-681e1.iam.gserviceaccount.com"]},{"role":"roles/firebasemods.serviceAgent","members":["serviceAccount:service-573072731729@gcp-sa-firebasemods.iam.gserviceaccount.com"]},{"role":"roles/firebaserules.system","members":["serviceAccount:service-573072731729@firebase-rules.iam.gserviceaccount.com"]},{"role":"roles/firestore.serviceAgent","members":["serviceAccount:service-573072731729@gcp-sa-firestore.iam.gserviceaccount.com"]},{"role":"roles/iam.serviceAccountTokenCreator","members":["serviceAccount:firebase-adminsdk-uh0p4@bsite-681e1.iam.gserviceaccount.com"]},{"role":"roles/owner","members":["user:bcardtoday@gmail.com"]},{"role":"roles/pubsub.serviceAgent","members":["serviceAccount:service-573072731729@gcp-sa-pubsub.iam.gserviceaccount.com"]}]}
[debug] {"version":1,"etag":"BwXt01ijNto=","bindings":[{"role":"roles/artifactregistry.serviceAgent","members":["serviceAccount:service-573072731729@gcp-sa-artifactregistry.iam.gserviceaccount.com"]},{"role":"roles/cloudbuild.builds.builder","members":["serviceAccount:573072731729@cloudbuild.gserviceaccount.com"]},{"role":"roles/cloudbuild.serviceAgent","members":["serviceAccount:service-573072731729@gcp-sa-cloudbuild.iam.gserviceaccount.com"]},{"role":"roles/cloudfunctions.serviceAgent","members":["serviceAccount:service-573072731729@gcf-admin-robot.iam.gserviceaccount.com"]},{"role":"roles/containerregistry.ServiceAgent","members":["serviceAccount:service-573072731729@containerregistry.iam.gserviceaccount.com"]},{"role":"roles/editor","members":["serviceAccount:573072731729@cloudservices.gserviceaccount.com","serviceAccount:bsite-681e1@appspot.gserviceaccount.com"]},{"role":"roles/firebase.managementServiceAgent","members":["serviceAccount:firebase-service-account@firebase-sa-management.iam.gserviceaccount.com","serviceAccount:service-573072731729@gcp-sa-firebase.iam.gserviceaccount.com"]},{"role":"roles/firebase.sdkAdminServiceAgent","members":["serviceAccount:firebase-adminsdk-uh0p4@bsite-681e1.iam.gserviceaccount.com"]},{"role":"roles/firebaseauth.admin","members":["serviceAccount:firebase-adminsdk-uh0p4@bsite-681e1.iam.gserviceaccount.com"]},{"role":"roles/firebasemods.serviceAgent","members":["serviceAccount:service-573072731729@gcp-sa-firebasemods.iam.gserviceaccount.com"]},{"role":"roles/firebaserules.system","members":["serviceAccount:service-573072731729@firebase-rules.iam.gserviceaccount.com"]},{"role":"roles/firestore.serviceAgent","members":["serviceAccount:service-573072731729@gcp-sa-firestore.iam.gserviceaccount.com"]},{"role":"roles/iam.serviceAccountTokenCreator","members":["serviceAccount:firebase-adminsdk-uh0p4@bsite-681e1.iam.gserviceaccount.com"]},{"role":"roles/owner","members":["user:bcardtoday@gmail.com"]},{"role":"roles/pubsub.serviceAgent","members":["serviceAccount:service-573072731729@gcp-sa-pubsub.iam.gserviceaccount.com"]}]}
[info] +  extensions: Project IAM policy OK 
[debug] [2022-11-20T04:55:33.109Z] >>> [apiv2][query] GET https://firebaseextensions.googleapis.com/v1beta/publishers/moralis/extensions/moralis-auth/versions filter=&showPrereleases=false&pageSize=100&pageToken=
[debug] [2022-11-20T04:55:34.272Z] <<< [apiv2][status] GET https://firebaseextensions.googleapis.com/v1beta/publishers/moralis/extensions/moralis-auth/versions 200
[debug] [2022-11-20T04:55:34.273Z] <<< [apiv2][body] GET https://firebaseextensions.googleapis.com/v1beta/publishers/moralis/extensions/moralis-auth/versions {"extensionVersions":[{"name":"publishers/moralis/extensions/moralis-auth/versions/0.1.2","ref":"moralis/moralis-auth@0.1.2","spec":{"specVersion":"v1beta","name":"moralis-auth","version":"0.1.2","description":"Signs in the using Moralis Auth as the identity provider.","apis":[{"apiName":"iam.googleapis.com","reason":"To sign custom authentication token"},{"apiName":"iamcredentials.googleapis.com","reason":"To sign custom authentication token"},{"apiName":"stackdriver.googleapis.com","reason":"Monitoring"},{"apiName":"monitoring.googleapis.com","reason":"Monitoring"},{"apiName":"logging.googleapis.com","reason":"Monitoring"},{"apiName":"secretmanager.googleapis.com","reason":"Securely storing and reading OAuth 2.0 client secret"}],"resources":[{"name":"requestMessage","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"This function creates a message to sign by a user.","deletionPolicy":"DELETE"},{"name":"issueToken","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"This function validates a signed message by a user. If the message is correctly signed, then the function issues a custom token.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Moralis","url":"https://moralis.io"},"contributors":[{"authorName":"Bart Tadych","url":"https://github.com/b4rtaz"}],"license":"Apache-2.0","sourceUrl":"https://github.com/MoralisWeb3/firebase-extensions/tree/main/auth","params":[{"param":"LOCATION","label":"Cloud Functions location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-central2","label":"Warsaw (europe-central2)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east1","label":"Taiwan (asia-east1)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast1","label":"Singapore (asia-southeast1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"immutable":true},{"param":"MORALIS_API_KEY","label":"Moralis API Key","type":"SECRET","description":"The API key that is retrievable from the Moralis Admin Panel.","required":true,"example":"6NkIpUJkuKlphOhBNVrpQq7fMB13v5Du5C6D90pZQRJS3bJssHblQc6Hh2rPLv3O","validationRegex":"^[a-zA-Z0-9]{64}$","validationErrorMessage":"The app ID must be retrieved from the Moralis Admin Panel."},{"param":"WEBSITE_URI","label":"Website URI","type":"STRING","description":"The website URI. It should contain a folder if present.","required":true,"example":"https://website.com/my-app"},{"param":"SERVICE_ACCOUNT_PROJECT_ID","label":"Project Id of Service Account","type":"STRING","description":"The project id of the service account. To extract this value from the service account certificate you can use our converter: https://moralisweb3.github.io/firebase-extensions/service-account-converter/","required":true,"example":"example-id"},{"param":"SERVICE_ACCOUNT_EMAIL","label":"E-mail of Service Account","type":"STRING","description":"The e-mail of the service account. To extract this value from the service account certificate you can use our converter: https://moralisweb3.github.io/firebase-extensions/service-account-converter/","required":true,"example":"firebase-adminsdk-lxrdi@example-id.iam.gserviceaccount.com","validationRegex":"^([a-zA-Z0-9]+(?:[.-]?[a-zA-Z0-9]+)*@[a-zA-Z0-9]+(?:[.-]?[a-zA-Z0-9]+)*\\.[a-zA-Z]{2,7})$","validationErrorMessage":"The e-mail provided has invalid format."},{"param":"SERVICE_ACCOUNT_PRIVATE_KEY","label":"Private Key of Service Account","type":"SECRET","description":"The private key of the service account. To extract this value from the service account certificate you can use our converter: https://moralisweb3.github.io/firebase-extensions/service-account-converter/","required":true,"example":"https://website.com/my-app","validationRegex":"^\\S+$","validationErrorMessage":"The private key provided has invalid format."}],"preinstallContent":"Use this extension to allow your community of users to authenticate with Web3 wallets.\n\n## Before Start\n\nThis extension requires a certificate of [the service account](https://firebase.google.com/support/guides/service-accounts). To generate it go to **Firebase Console** > **Your Project** > **Project Settings** > **Service Accounts** and click the **Generate new private key** button.\n\nYour service account must have the **Service Account Token Creator** role. This extension needs it to issue [custom tokens](https://firebase.google.com/docs/auth/admin/create-custom-tokens).\n\nDuring the installation process the installer will ask you about the certificate. Before you answer, you need to convert the certificate to extension variables. We created an online converter that automates this process.\n\n*  [🛠 Open Service Account Converter](https://moralisweb3.github.io/firebase-extensions/service-account-converter/)\n\n## Billing\n\nThis extension uses the following services:\n\n* Firebase Cloud Functions and Firebase Authentication, this extension requires the pay as you go plan ([pricing](https://firebase.google.com/pricing))\n* [Secret Manager](https://cloud.google.com/secret-manager/) service ([pricing](https://cloud.google.com/secret-manager/pricing)) from the Google Cloud to protect a sensitive configuration of the extension\n* Moralis Auth API ([pricing](https://moralis.io/pricing/)) to handle an authentication flow.\n\nYou are responsible for any costs associated with your use of these services.\n","postinstallContent":"### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n","readmeContent":"# Authenticate with Moralis Web3\n\nSigns in using Moralis Auth as the identity provider. \n\n### How to Install?\n\nUsing the Firebase CLI:\n\n**Step 1**: Before you start, you need to generate a certificate for the Service Account. This extension requires the service account for issuing authorization tokens. To generate the certificate go to: `Firebase Console` > `Your Project` > `Project Settings` > `Service Accounts` and click the `Generate new private key` button.\n\n**Step 2**: Add the extension to your project: `firebase ext:install moralis/moralis-auth --local --project=<PROJECT_ID_OR_ALIAS>`\n\n**Step 3**: During the installation process, you will be asked for some information. Some of them would be questions about the service account. The extension needs some data from your certificate. We've created the converter that extracts this information: [open the converter](https://moralisweb3.github.io/firebase-extensions/service-account-converter/), put your certificate in the text field and copy a variable value as an answer for a specific question in your console.\n\n**Step 4 (Optional)**: Test this extension locally: `firebase emulators:start`\n\n**Step 5**: Deploy this extension: `firebase deploy --only extensions --project=<PROJECT_ID_OR_ALIAS>`\n","displayName":"Authenticate with Moralis Auth"},"state":"PUBLISHED","hash":"b3f6a87d77b2f019ad0bf0dec259788789f772583860d224a86ce0360143711b","createTime":"2022-09-21T08:06:52.784293Z"},{"name":"publishers/moralis/extensions/moralis-auth/versions/0.1.3","ref":"moralis/moralis-auth@0.1.3","spec":{"specVersion":"v1beta","name":"moralis-auth","version":"0.1.3","description":"Signs in the using Moralis Auth as the identity provider.","apis":[{"apiName":"iam.googleapis.com","reason":"To sign custom authentication token"},{"apiName":"iamcredentials.googleapis.com","reason":"To sign custom authentication token"},{"apiName":"stackdriver.googleapis.com","reason":"Monitoring"},{"apiName":"monitoring.googleapis.com","reason":"Monitoring"},{"apiName":"logging.googleapis.com","reason":"Monitoring"},{"apiName":"secretmanager.googleapis.com","reason":"Securely storing and reading OAuth 2.0 client secret"}],"resources":[{"name":"requestMessage","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"This function creates a message to sign by a user.","deletionPolicy":"DELETE"},{"name":"issueToken","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"This function validates a signed message by a user. If the message is correctly signed, then the function issues a custom token.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Moralis","url":"https://moralis.io"},"contributors":[{"authorName":"Bart Tadych","url":"https://github.com/b4rtaz"}],"license":"Apache-2.0","sourceUrl":"https://github.com/MoralisWeb3/firebase-extensions/tree/main/auth","params":[{"param":"LOCATION","label":"Cloud Functions location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-central2","label":"Warsaw (europe-central2)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east1","label":"Taiwan (asia-east1)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast1","label":"Singapore (asia-southeast1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"immutable":true},{"param":"MORALIS_API_KEY","label":"Moralis API Key","type":"SECRET","description":"The API key that is retrievable from the Moralis Admin Panel.","required":true,"example":"6NkIpUJkuKlphOhBNVrpQq7fMB13v5Du5C6D90pZQRJS3bJssHblQc6Hh2rPLv3O","validationRegex":"^[a-zA-Z0-9]{64}$","validationErrorMessage":"The app ID must be retrieved from the Moralis Admin Panel."},{"param":"WEBSITE_URI","label":"Website URI","type":"STRING","description":"The final website URI. It should contain a folder if present. For testing purposes, you may enter: http://localhost, but we recommend to enter a URI where you will release your app. This URI will be used in the authentication flow.","required":true,"example":"https://website.com/my-app"},{"param":"SERVICE_ACCOUNT_PROJECT_ID","label":"Project Id of Service Account","type":"STRING","description":"The project id of the service account. To extract this value from the service account certificate you can use our converter: https://moralisweb3.github.io/firebase-extensions/service-account-converter/","required":true,"example":"example-id"},{"param":"SERVICE_ACCOUNT_EMAIL","label":"E-mail of Service Account","type":"STRING","description":"The e-mail of the service account. To extract this value from the service account certificate you can use our converter: https://moralisweb3.github.io/firebase-extensions/service-account-converter/","required":true,"example":"firebase-adminsdk-lxrdi@example-id.iam.gserviceaccount.com","validationRegex":"^([a-zA-Z0-9]+(?:[.-]?[a-zA-Z0-9]+)*@[a-zA-Z0-9]+(?:[.-]?[a-zA-Z0-9]+)*\\.[a-zA-Z]{2,7})$","validationErrorMessage":"The e-mail provided has invalid format."},{"param":"SERVICE_ACCOUNT_PRIVATE_KEY","label":"Private Key of Service Account","type":"SECRET","description":"The private key of the service account. To extract this value from the service account certificate you can use our converter: https://moralisweb3.github.io/firebase-extensions/service-account-converter/","required":true,"example":"https://website.com/my-app","validationRegex":"^\\S+$","validationErrorMessage":"The private key provided has invalid format."}],"preinstallContent":"Use this extension to allow your community of users to authenticate with Web3 wallets.\n\n## Before Start\n\nThis extension requires a certificate of [the service account](https://firebase.google.com/support/guides/service-accounts). To generate it go to **Firebase Console** > **Your Project** > **Project Settings** > **Service Accounts** and click the **Generate new private key** button.\n\nYour service account must have the **Service Account Token Creator** role. This extension needs it to issue [custom tokens](https://firebase.google.com/docs/auth/admin/create-custom-tokens).\n\nDuring the installation process the installer will ask you about the certificate. Before you answer, you need to convert the certificate to extension variables. We created an online converter that automates this process.\n\n*  [🛠 Open Service Account Converter](https://moralisweb3.github.io/firebase-extensions/service-account-converter/)\n\n## Billing\n\nThis extension uses the following services:\n\n* Firebase Cloud Functions and Firebase Authentication, this extension requires the pay as you go plan ([pricing](https://firebase.google.com/pricing))\n* [Secret Manager](https://cloud.google.com/secret-manager/) service ([pricing](https://cloud.google.com/secret-manager/pricing)) from the Google Cloud to protect a sensitive configuration of the extension\n* Moralis Auth API ([pricing](https://moralis.io/pricing/)) to handle an authentication flow.\n\nYou are responsible for any costs associated with your use of these services.\n","postinstallContent":"### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n","readmeContent":"# Authenticate with Moralis Web3\n\nSigns in using Moralis Auth as the identity provider. \n\n### How to Install?\n\nUsing the Firebase CLI:\n\n**Step 1**: Before you start, you need to generate a certificate for the Service Account. This extension requires the service account for issuing authorization tokens. To generate the certificate go to: `Firebase Console` > `Your Project` > `Project Settings` > `Service Accounts` and click the `Generate new private key` button.\n\n**Step 2**: Add the extension to your project: `firebase ext:install moralis/moralis-auth --local --project=<PROJECT_ID_OR_ALIAS>`\n\n**Step 3**: During the installation process, you will be asked for some information. Some of them would be questions about the service account. The extension needs some data from your certificate. We've created the converter that extracts this information: [open the converter](https://moralisweb3.github.io/firebase-extensions/service-account-converter/), put your certificate in the text field and copy a variable value as an answer for a specific question in your console.\n\n**Step 4 (Optional)**: Test this extension locally: `firebase emulators:start`\n\n**Step 5**: Deploy this extension: `firebase deploy --only extensions --project=<PROJECT_ID_OR_ALIAS>`\n","displayName":"Authenticate with Moralis Auth"},"state":"PUBLISHED","hash":"96848d87c1b31e9b0496555a8aa2df73045a4cebcbf9b2903dfd25417150e3c4","createTime":"2022-11-02T14:29:51.606662Z","releaseNotes":"Configure product name.\n"},{"name":"publishers/moralis/extensions/moralis-auth/versions/0.1.4","ref":"moralis/moralis-auth@0.1.4","spec":{"specVersion":"v1beta","name":"moralis-auth","version":"0.1.4","description":"Signs in the using Moralis Auth as the identity provider.","apis":[{"apiName":"iam.googleapis.com","reason":"To sign custom authentication token"},{"apiName":"iamcredentials.googleapis.com","reason":"To sign custom authentication token"},{"apiName":"stackdriver.googleapis.com","reason":"Monitoring"},{"apiName":"monitoring.googleapis.com","reason":"Monitoring"},{"apiName":"logging.googleapis.com","reason":"Monitoring"},{"apiName":"secretmanager.googleapis.com","reason":"Securely storing and reading OAuth 2.0 client secret"}],"resources":[{"name":"requestMessage","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"This function creates a message to sign by a user.","deletionPolicy":"DELETE"},{"name":"issueToken","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"This function validates a signed message by a user. If the message is correctly signed, then the function issues a custom token.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Moralis","url":"https://moralis.io"},"contributors":[{"authorName":"Bart Tadych","url":"https://github.com/b4rtaz"}],"license":"Apache-2.0","sourceUrl":"https://github.com/MoralisWeb3/firebase-extensions/tree/main/auth","params":[{"param":"LOCATION","label":"Cloud Functions location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-central2","label":"Warsaw (europe-central2)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east1","label":"Taiwan (asia-east1)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast1","label":"Singapore (asia-southeast1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"immutable":true},{"param":"MORALIS_API_KEY","label":"Moralis API Key","type":"SECRET","description":"The API key that is retrievable from the Moralis Admin Panel.","required":true,"example":"6NkIpUJkuKlphOhBNVrpQq7fMB13v5Du5C6D90pZQRJS3bJssHblQc6Hh2rPLv3O","validationRegex":"^[a-zA-Z0-9]{64}$","validationErrorMessage":"The app ID must be retrieved from the Moralis Admin Panel."},{"param":"WEBSITE_URI","label":"Website URI","type":"STRING","description":"The final website URI. It should contain a folder if present. For testing purposes, you may enter: http://localhost, but we recommend to enter a URI where you will release your app. This URI will be used in the authentication flow.","required":true,"example":"https://website.com/my-app"},{"param":"SERVICE_ACCOUNT_PROJECT_ID","label":"Project Id of Service Account","type":"STRING","description":"The project id of the service account. To extract this value from the service account certificate you can use our converter: https://moralisweb3.github.io/firebase-extensions/service-account-converter/","required":true,"example":"example-id"},{"param":"SERVICE_ACCOUNT_EMAIL","label":"E-mail of Service Account","type":"STRING","description":"The e-mail of the service account. To extract this value from the service account certificate you can use our converter: https://moralisweb3.github.io/firebase-extensions/service-account-converter/","required":true,"example":"firebase-adminsdk-lxrdi@example-id.iam.gserviceaccount.com","validationRegex":"^([a-zA-Z0-9]+(?:[.-]?[a-zA-Z0-9]+)*@[a-zA-Z0-9]+(?:[.-]?[a-zA-Z0-9]+)*\\.[a-zA-Z]{2,7})$","validationErrorMessage":"The e-mail provided has invalid format."},{"param":"SERVICE_ACCOUNT_PRIVATE_KEY","label":"Private Key of Service Account","type":"SECRET","description":"The private key of the service account. To extract this value from the service account certificate you can use our converter: https://moralisweb3.github.io/firebase-extensions/service-account-converter/","required":true,"example":"https://website.com/my-app","validationRegex":"^\\S+$","validationErrorMessage":"The private key provided has invalid format."}],"preinstallContent":"Use this extension to allow your community of users to authenticate with Web3 wallets.\n\n## Before Start\n\nThis extension requires a certificate of [the service account](https://firebase.google.com/support/guides/service-accounts). To generate it go to **Firebase Console** > **Your Project** > **Project Settings** > **Service Accounts** and click the **Generate new private key** button.\n\nYour service account must have the **Service Account Token Creator** role. This extension needs it to issue [custom tokens](https://firebase.google.com/docs/auth/admin/create-custom-tokens).\n\nDuring the installation process the installer will ask you about the certificate. Before you answer, you need to convert the certificate to extension variables. We created an online converter that automates this process.\n\n*  [🛠 Open Service Account Converter](https://moralisweb3.github.io/firebase-extensions/service-account-converter/)\n\n## Billing\n\nThis extension uses the following services:\n\n* Firebase Cloud Functions and Firebase Authentication, this extension requires the pay as you go plan ([pricing](https://firebase.google.com/pricing))\n* [Secret Manager](https://cloud.google.com/secret-manager/) service ([pricing](https://cloud.google.com/secret-manager/pricing)) from the Google Cloud to protect a sensitive configuration of the extension\n* Moralis Auth API ([pricing](https://moralis.io/pricing/)) to handle an authentication flow.\n\nYou are responsible for any costs associated with your use of these services.\n","postinstallContent":"### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n","readmeContent":"# Authenticate with Moralis Web3\n\nSigns in using Moralis Auth as the identity provider. \n\n### How to Install?\n\nUsing the Firebase CLI:\n\n**Step 1**: Before you start, you need to generate a certificate for the Service Account. This extension requires the service account for issuing authorization tokens. To generate the certificate go to: `Firebase Console` > `Your Project` > `Project Settings` > `Service Accounts` and click the `Generate new private key` button.\n\n**Step 2**: Add the extension to your project: `firebase ext:install moralis/moralis-auth --local --project=<PROJECT_ID_OR_ALIAS>`\n\n**Step 3**: During the installation process, you will be asked for some information. Some of them would be questions about the service account. The extension needs some data from your certificate. We've created the converter that extracts this information: [open the converter](https://moralisweb3.github.io/firebase-extensions/service-account-converter/), put your certificate in the text field and copy a variable value as an answer for a specific question in your console.\n\n**Step 4 (Optional)**: Test this extension locally: `firebase emulators:start`\n\n**Step 5**: Deploy this extension: `firebase deploy --only extensions --project=<PROJECT_ID_OR_ALIAS>`\n","displayName":"Authenticate with Moralis Auth"},"state":"PUBLISHED","hash":"5cfdc4bbc3f482d7ced79022e6cd026249b991513bac9e43b5fee2d81be0026e","createTime":"2022-11-02T16:06:41.811636Z","releaseNotes":"Update dependencies.\n"}]}
[debug] [2022-11-20T04:55:34.275Z] >>> [apiv2][query] GET https://firebaseextensions.googleapis.com/v1beta/publishers/moralis/extensions/moralis-auth/versions/0.1.4 [none]
[debug] [2022-11-20T04:55:35.703Z] <<< [apiv2][status] GET https://firebaseextensions.googleapis.com/v1beta/publishers/moralis/extensions/moralis-auth/versions/0.1.4 200
[debug] [2022-11-20T04:55:35.703Z] <<< [apiv2][body] GET https://firebaseextensions.googleapis.com/v1beta/publishers/moralis/extensions/moralis-auth/versions/0.1.4 {"name":"publishers/moralis/extensions/moralis-auth/versions/0.1.4","ref":"moralis/moralis-auth@0.1.4","spec":{"specVersion":"v1beta","name":"moralis-auth","version":"0.1.4","description":"Signs in the using Moralis Auth as the identity provider.","apis":[{"apiName":"iam.googleapis.com","reason":"To sign custom authentication token"},{"apiName":"iamcredentials.googleapis.com","reason":"To sign custom authentication token"},{"apiName":"stackdriver.googleapis.com","reason":"Monitoring"},{"apiName":"monitoring.googleapis.com","reason":"Monitoring"},{"apiName":"logging.googleapis.com","reason":"Monitoring"},{"apiName":"secretmanager.googleapis.com","reason":"Securely storing and reading OAuth 2.0 client secret"}],"resources":[{"name":"requestMessage","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"This function creates a message to sign by a user.","deletionPolicy":"DELETE"},{"name":"issueToken","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"This function validates a signed message by a user. If the message is correctly signed, then the function issues a custom token.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Moralis","url":"https://moralis.io"},"contributors":[{"authorName":"Bart Tadych","url":"https://github.com/b4rtaz"}],"license":"Apache-2.0","sourceUrl":"https://github.com/MoralisWeb3/firebase-extensions/tree/main/auth","params":[{"param":"LOCATION","label":"Cloud Functions location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-central2","label":"Warsaw (europe-central2)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east1","label":"Taiwan (asia-east1)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast1","label":"Singapore (asia-southeast1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"immutable":true},{"param":"MORALIS_API_KEY","label":"Moralis API Key","type":"SECRET","description":"The API key that is retrievable from the Moralis Admin Panel.","required":true,"example":"6NkIpUJkuKlphOhBNVrpQq7fMB13v5Du5C6D90pZQRJS3bJssHblQc6Hh2rPLv3O","validationRegex":"^[a-zA-Z0-9]{64}$","validationErrorMessage":"The app ID must be retrieved from the Moralis Admin Panel."},{"param":"WEBSITE_URI","label":"Website URI","type":"STRING","description":"The final website URI. It should contain a folder if present. For testing purposes, you may enter: http://localhost, but we recommend to enter a URI where you will release your app. This URI will be used in the authentication flow.","required":true,"example":"https://website.com/my-app"},{"param":"SERVICE_ACCOUNT_PROJECT_ID","label":"Project Id of Service Account","type":"STRING","description":"The project id of the service account. To extract this value from the service account certificate you can use our converter: https://moralisweb3.github.io/firebase-extensions/service-account-converter/","required":true,"example":"example-id"},{"param":"SERVICE_ACCOUNT_EMAIL","label":"E-mail of Service Account","type":"STRING","description":"The e-mail of the service account. To extract this value from the service account certificate you can use our converter: https://moralisweb3.github.io/firebase-extensions/service-account-converter/","required":true,"example":"firebase-adminsdk-lxrdi@example-id.iam.gserviceaccount.com","validationRegex":"^([a-zA-Z0-9]+(?:[.-]?[a-zA-Z0-9]+)*@[a-zA-Z0-9]+(?:[.-]?[a-zA-Z0-9]+)*\\.[a-zA-Z]{2,7})$","validationErrorMessage":"The e-mail provided has invalid format."},{"param":"SERVICE_ACCOUNT_PRIVATE_KEY","label":"Private Key of Service Account","type":"SECRET","description":"The private key of the service account. To extract this value from the service account certificate you can use our converter: https://moralisweb3.github.io/firebase-extensions/service-account-converter/","required":true,"example":"https://website.com/my-app","validationRegex":"^\\S+$","validationErrorMessage":"The private key provided has invalid format."}],"preinstallContent":"Use this extension to allow your community of users to authenticate with Web3 wallets.\n\n## Before Start\n\nThis extension requires a certificate of [the service account](https://firebase.google.com/support/guides/service-accounts). To generate it go to **Firebase Console** > **Your Project** > **Project Settings** > **Service Accounts** and click the **Generate new private key** button.\n\nYour service account must have the **Service Account Token Creator** role. This extension needs it to issue [custom tokens](https://firebase.google.com/docs/auth/admin/create-custom-tokens).\n\nDuring the installation process the installer will ask you about the certificate. Before you answer, you need to convert the certificate to extension variables. We created an online converter that automates this process.\n\n*  [🛠 Open Service Account Converter](https://moralisweb3.github.io/firebase-extensions/service-account-converter/)\n\n## Billing\n\nThis extension uses the following services:\n\n* Firebase Cloud Functions and Firebase Authentication, this extension requires the pay as you go plan ([pricing](https://firebase.google.com/pricing))\n* [Secret Manager](https://cloud.google.com/secret-manager/) service ([pricing](https://cloud.google.com/secret-manager/pricing)) from the Google Cloud to protect a sensitive configuration of the extension\n* Moralis Auth API ([pricing](https://moralis.io/pricing/)) to handle an authentication flow.\n\nYou are responsible for any costs associated with your use of these services.\n","postinstallContent":"### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n","readmeContent":"# Authenticate with Moralis Web3\n\nSigns in using Moralis Auth as the identity provider. \n\n### How to Install?\n\nUsing the Firebase CLI:\n\n**Step 1**: Before you start, you need to generate a certificate for the Service Account. This extension requires the service account for issuing authorization tokens. To generate the certificate go to: `Firebase Console` > `Your Project` > `Project Settings` > `Service Accounts` and click the `Generate new private key` button.\n\n**Step 2**: Add the extension to your project: `firebase ext:install moralis/moralis-auth --local --project=<PROJECT_ID_OR_ALIAS>`\n\n**Step 3**: During the installation process, you will be asked for some information. Some of them would be questions about the service account. The extension needs some data from your certificate. We've created the converter that extracts this information: [open the converter](https://moralisweb3.github.io/firebase-extensions/service-account-converter/), put your certificate in the text field and copy a variable value as an answer for a specific question in your console.\n\n**Step 4 (Optional)**: Test this extension locally: `firebase emulators:start`\n\n**Step 5**: Deploy this extension: `firebase deploy --only extensions --project=<PROJECT_ID_OR_ALIAS>`\n","displayName":"Authenticate with Moralis Auth"},"state":"PUBLISHED","hash":"5cfdc4bbc3f482d7ced79022e6cd026249b991513bac9e43b5fee2d81be0026e","createTime":"2022-11-02T16:06:41.811636Z","sourceDownloadUri":"https://storage.googleapis.com/firebase-mod-sources-prod/5cfdc4bbc3f482d7ced79022e6cd026249b991513bac9e43b5fee2d81be0026e","releaseNotes":"Update dependencies.\n"}
[debug] [2022-11-20T04:55:35.705Z] >>> [apiv2][query] GET https://firebaseextensions.googleapis.com/v1beta/publishers/moralis/extensions/moralis-auth [none]
[debug] [2022-11-20T04:55:36.841Z] <<< [apiv2][status] GET https://firebaseextensions.googleapis.com/v1beta/publishers/moralis/extensions/moralis-auth 200
[debug] [2022-11-20T04:55:36.841Z] <<< [apiv2][body] GET https://firebaseextensions.googleapis.com/v1beta/publishers/moralis/extensions/moralis-auth {"name":"publishers/moralis/extensions/moralis-auth","ref":"moralis/moralis-auth","latestVersion":"0.1.4","latestVersionCreateTime":"2022-11-02T16:06:41.811636Z","state":"PUBLISHED","createTime":"2022-09-21T08:06:52.784293Z","visibility":"UNLISTED","registryLaunchStage":"EXPERIMENTAL","publisher":{"displayName":"Moralis"}}
[debug] [2022-11-20T04:55:36.842Z] >>> [apiv2][query] GET https://iam.googleapis.com/v1/roles/secretmanager.secretAccessor [none]
[debug] [2022-11-20T04:55:38.551Z] <<< [apiv2][status] GET https://iam.googleapis.com/v1/roles/secretmanager.secretAccessor 200
[debug] [2022-11-20T04:55:38.551Z] <<< [apiv2][body] GET https://iam.googleapis.com/v1/roles/secretmanager.secretAccessor {"name":"roles/secretmanager.secretAccessor","title":"Secret Manager Secret Accessor","description":"Allows accessing the payload of secrets.","includedPermissions":["resourcemanager.projects.get","resourcemanager.projects.list","secretmanager.versions.access"],"stage":"GA","etag":"AA=="}
[info] i  extensions: information about 'moralis/moralis-auth@0.1.4': 
[info] Name: Authenticate with Moralis Auth
Publisher: moralis
Description: Signs in the using Moralis Auth as the identity provider.
License: Apache-2.0
Source code: https://github.com/MoralisWeb3/firebase-extensions/tree/main/auth
APIs used by this Extension:
  iam.googleapis.com (To sign custom authentication token)
  iamcredentials.googleapis.com (To sign custom authentication token)
  stackdriver.googleapis.com (Monitoring)
  monitoring.googleapis.com (Monitoring)
  logging.googleapis.com (Monitoring)
  secretmanager.googleapis.com (Securely storing and reading OAuth 2.0 client secret)
Roles granted to this Extension:
  Secret Manager Secret Accessor (Allows accessing the payload of secrets.)

[debug] [2022-11-20T04:55:38.567Z] >>> [apiv2][query] GET https://extensions-registry.firebaseapp.com/extensions.json [none]
[debug] [2022-11-20T04:55:38.612Z] <<< [apiv2][status] GET https://extensions-registry.firebaseapp.com/extensions.json 200
[debug] [2022-11-20T04:55:38.613Z] <<< [apiv2][body] GET https://extensions-registry.firebaseapp.com/extensions.json {"mods":{"auth-mailchimp-sync":{"publisher":"firebase"},"delete-user-data":{"publisher":"firebase"},"firestore-algolia-search":{"publisher":"algolia"},"firestore-auth-claims":{"publisher":"firebase"},"firestore-bigquery-export":{"publisher":"firebase"},"firestore-bundle-server":{"publisher":"firebase"},"firestore-counter":{"publisher":"firebase"},"firestore-detect-presence":{"publisher":"firebase"},"firestore-messagebird-send-msg":{"publisher":"messagebird"},"firestore-perspective-toxicity":{"publisher":"jigsaw"},"firestore-schedule-writes":{"publisher":"firebase"},"firestore-send-email":{"publisher":"firebase"},"firestore-sentiment-analysis":{"publisher":"firebase"},"firestore-shorten-urls-bitly":{"publisher":"firebase"},"firestore-shorten-urls-dynamic-links":{"publisher":"firebase"},"firestore-stripe-invoices":{"publisher":"stripe"},"firestore-stripe-subscriptions":{"publisher":"stripe"},"firestore-translate-text":{"publisher":"firebase"},"mailchimp-firebase-sync":{"publisher":"mailchimp"},"pubsub-stream-bigquery":{"publisher":"firebase"},"rtdb-limit-child-nodes":{"publisher":"firebase"},"storage-extract-image-text":{"publisher":"firebase"},"storage-image-labeling":{"publisher":"firebase"},"storage-mirror-firestore":{"publisher":"firebase"},"storage-resize-images":{"publisher":"firebase"},"firestore-elastic-app-search":{"publisher":"elastic"},"track-labels":{"publisher":"shipengine"},"calculate-rates":{"publisher":"shipengine"},"purchase-labels":{"publisher":"shipengine"},"validate-addresses":{"publisher":"shipengine"},"abandoned-cart-emails":{"publisher":"twilio"},"send-message":{"publisher":"twilio"},"sendgrid-sync-contacts":{"publisher":"twilio"},"make-payment":{"publisher":"google-pay"},"firestore-stripe-payments":{"publisher":"stripe"},"firestore-typesense-search":{"publisher":"typesense"},"auth-activity-feeds":{"publisher":"stream"},"auth-chat":{"publisher":"stream"},"firestore-activity-feeds":{"publisher":"stream"},"snapchat-login":{"publisher":"snap"},"snapchat-sticker-generator":{"publisher":"snap"},"firestore-revenuecat-purchases":{"publisher":"revenuecat"},"firestore-record-acknowledgments":{"publisher":"invertase"},"export-user-data":{"publisher":"invertase"},"image-processing-api":{"publisher":"invertase"},"purchasely-in-app-purchases":{"publisher":"purchasely"},"firestore-vonage-video-express":{"publisher":"vonage"},"firestore-meilisearch":{"publisher":"meilisearch"},"firestore-bundle-builder":{"publisher":"firebase"}},"featured":{"discover":["firestore-bigquery-export","firestore-algolia-search","firestore-send-email","firestore-stripe-payments","firestore-typesense-search","auth-chat","snapchat-login","storage-resize-images","firestore-revenuecat-purchases","delete-user-data","send-message","mailchimp-firebase-sync","auth-activity-feeds","firestore-elastic-app-search","firestore-activity-feeds","make-payment","firestore-perspective-toxicity","track-labels","snapchat-sticker-generator","validate-addresses","sendgrid-sync-contacts","firestore-translate-text","firestore-messagebird-send-msg","firestore-counter","firestore-stripe-invoices","firestore-shorten-urls-bitly","rtdb-limit-child-nodes","abandoned-cart-emails","calculate-rates","purchase-labels","image-processing-api","record-user-acknowledgments","export-user-data","firestore-meilisearch","purchasely-in-app-purchases","firestore-vonage-video-express","firestore-bundle-builder"],"closed-alpha":[]}}
[info] i  extensions: This extension is in preview and is built by a developer in the Extensions Publisher Early Access Program (http://bit.ly/firex-provider). Its functionality might change in backward-incompatible ways. Since this extension isn't built by Firebase, reach out to moralis (https://github.com/MoralisWeb3/firebase-extensions/tree/main/auth) with questions about this extension.

It is provided “AS IS”, without any warranty, express or implied, from Google. Google disclaims all liability for any damages, direct or indirect, resulting from the use of the extension, and its functionality might change in backward - incompatible ways.

 
[info] i  Want to review the source code that will be installed? Download it here: https://storage.googleapis.com/firebase-mod-sources-prod/5cfdc4bbc3f482d7ced79022e6cd026249b991513bac9e43b5fee2d81be0026e

 
[debug] [2022-11-20T04:55:46.791Z] Object ".extensions" in "firebase.json" has unknown property: {"additionalProperty":"moralis-auth"}
[info] Invalid instance ID. Instance ID must be between 6 and 45 characters.
[info] Invalid instance ID. Instance ID must start with a lowercase letter, end with a lowercase letter or number, and only contain lowercase letters, numbers, or -
[debug] [2022-11-20T04:56:27.589Z] >>> [apiv2][query] GET https://firebase.googleapis.com/v1beta1/projects/bsite-681e1/adminSdkConfig [none]
[debug] [2022-11-20T04:56:28.126Z] <<< [apiv2][status] GET https://firebase.googleapis.com/v1beta1/projects/bsite-681e1/adminSdkConfig 200
[debug] [2022-11-20T04:56:28.127Z] <<< [apiv2][body] GET https://firebase.googleapis.com/v1beta1/projects/bsite-681e1/adminSdkConfig {"projectId":"bsite-681e1","storageBucket":"bsite-681e1.appspot.com"}
[debug] [2022-11-20T04:56:28.127Z] >>> [apiv2][query] GET https://firebase.googleapis.com/v1beta1/projects/bsite-681e1 [none]
[debug] [2022-11-20T04:56:28.396Z] <<< [apiv2][status] GET https://firebase.googleapis.com/v1beta1/projects/bsite-681e1 200
[debug] [2022-11-20T04:56:28.397Z] <<< [apiv2][body] GET https://firebase.googleapis.com/v1beta1/projects/bsite-681e1 {"projectId":"bsite-681e1","projectNumber":"573072731729","displayName":"bsite","name":"projects/bsite-681e1","resources":{"hostingSite":"bsite-681e1"},"state":"ACTIVE","etag":"1_c7b10c89-522f-423b-b5cb-f22144b268ac"}
[info] i  extensions: answer the questions below to configure your extension: 
[info] 
Cloud Functions location: Where do you want to deploy the functions created for this extension? For help selecting a location, refer to the location selection guide (https://firebase.google.com/docs/functions/locations).
[info] 
Moralis API Key: The API key that is retrievable from the Moralis Admin Panel.
[debug] [2022-11-20T04:56:32.149Z] >>> [apiv2][query] GET https://secretmanager.googleapis.com/v1/projects/bsite-681e1/secrets/ext-moralisbsite-MORALIS_API_KEY [none]
[debug] [2022-11-20T04:56:33.232Z] <<< [apiv2][status] GET https://secretmanager.googleapis.com/v1/projects/bsite-681e1/secrets/ext-moralisbsite-MORALIS_API_KEY 404
[debug] [2022-11-20T04:56:33.232Z] <<< [apiv2][body] GET https://secretmanager.googleapis.com/v1/projects/bsite-681e1/secrets/ext-moralisbsite-MORALIS_API_KEY {"error":{"code":404,"message":"Secret [projects/573072731729/secrets/ext-moralisbsite-MORALIS_API_KEY] not found.","status":"NOT_FOUND"}}
